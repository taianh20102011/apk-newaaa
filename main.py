# main.py
import json
import os
import random
from datetime import datetime

from kivy.lang import Builder
from kivy.metrics import dp
from kivy.clock import Clock
from kivy.properties import DictProperty, StringProperty, BooleanProperty, NumericProperty
from kivy.uix.screenmanager import Screen
from kivy.uix.screenmanager import ScreenManager

from kivymd.app import MDApp

# ---------------- KV (giao di·ªán) ----------------
KV = r'''
#:import dp kivy.metrics.dp

ScreenManager:
    MainMenuScreen:
    ScenarioListScreen:
    ScenarioScreen:
    ResultScreen:
    KnowledgeScreen:
    HistoryScreen:
    ProfileScreen:

<MainMenuScreen>:
    name: "menu"
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "‚ö° C·∫£nh b√°o t√¨nh hu·ªëng"
            elevation: 6

        MDBoxLayout:
            orientation: "vertical"
            padding: dp(20)
            spacing: dp(16)

            MDCard:
                radius: [14,]
                padding: dp(14)
                md_bg_color: app.theme_cls.primary_light
                elevation: 8
                size_hint_y: None
                height: self.minimum_height

                MDLabel:
                    text: "·ª®ng d·ª•ng m√¥ ph·ªèng t√¨nh hu·ªëng an to√†n"
                    font_style: "H6"
                    halign: "left"

                MDLabel:
                    text: "H·ªçc sinh THCS ‚Äî ph√¢n bi·ªát an to√†n / nguy hi·ªÉm"
                    font_style: "Caption"
                    halign: "left"

            MDRaisedButton:
                text: "üöÄ B·∫Øt ƒë·∫ßu m√¥ ph·ªèng"
                size_hint_y: None
                height: dp(48)
                on_release: app.root.current = "scenario_list"

            MDRaisedButton:
                text: "üìò Kho ki·∫øn th·ª©c"
                size_hint_y: None
                height: dp(48)
                on_release: app.root.current = "knowledge"

            MDRaisedButton:
                text: "üìä L·ªãch s·ª≠ / B√°o c√°o"
                size_hint_y: None
                height: dp(48)
                on_release: app.root.current = "history"

            MDRaisedButton:
                text: "üë§ H·ªì s∆°"
                size_hint_y: None
                height: dp(48)
                on_release: app.root.current = "profile"

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<ScenarioListScreen>:
    name: "scenario_list"
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "üìã Danh s√°ch t√¨nh hu·ªëng"
            left_action_items: [["arrow-left", lambda x: app.go_back("menu")]]
            elevation: 6

        ScrollView:
            MDList:
                id: list_container
                padding: dp(8)

        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
            padding: dp(12)
            MDRaisedButton:
                text: "üîÄ Random th·ª≠"
                pos_hint: {"center_x": 0.5}
                on_release: root.open_random()

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<ScenarioScreen>:
    name: "scenario"
    scenario: {}
    current_index: -1
    answered: False

    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: root.scenario.get("title", "T√¨nh hu·ªëng")
            left_action_items: [["arrow-left", lambda x: app.go_back("scenario_list")]]
            elevation: 6

        ScrollView:
            MDBoxLayout:
                orientation: "vertical"
                padding: dp(20)
                spacing: dp(12)
                adaptive_height: True

                MDCard:
                    radius: [12,]
                    padding: dp(12)
                    md_bg_color: app.theme_cls.primary_light
                    elevation: 6
                    size_hint_y: None
                    height: self.minimum_height

                    MDLabel:
                        id: desc_label
                        text: root.scenario.get("description", "")
                        halign: "left"
                        text_size: self.width, None
                        size_hint_y: None
                        height: self.texture_size[1]

                MDSeparator:
                    height: dp(1)

                MDLabel:
                    text: "Ch·ªçn ph∆∞∆°ng √°n:"
                    font_style: "Subtitle1"
                    size_hint_y: None
                    height: dp(28)

                MDBoxLayout:
                    id: choice_box
                    orientation: "vertical"
                    spacing: dp(10)
                    adaptive_height: True

                MDLabel:
                    id: feedback
                    text: ""
                    theme_text_color: "Error"
                    halign: "center"
                    size_hint_y: None
                    height: dp(36)

        MDBoxLayout:
            size_hint_y: None
            height: dp(72)
            spacing: dp(12)
            padding: dp(12)

            MDRaisedButton:
                text: "üì¢ G·ª≠i b√°o c√°o"
                on_release: root.send_report()

            MDRaisedButton:
                text: "‚ÑπÔ∏è Gi·∫£i th√≠ch"
                on_release: root.show_explanation()

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<ResultScreen>:
    name: "result"
    title: "K·∫øt qu·∫£"
    verdict_text: ""
    explanation: ""
    current_index: -1

    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: root.title
            left_action_items: [["arrow-left", lambda x: app.go_back("scenario_list")]]
            elevation: 6

        MDLabel:
            id: verdict
            text: root.verdict_text
            halign: "center"
            font_style: "H6"
            size_hint_y: None
            height: dp(72)

        ScrollView:
            MDLabel:
                id: explanation
                text: root.explanation
                halign: "left"
                text_size: self.width, None
                size_hint_y: None
                height: self.texture_size[1]

        MDBoxLayout:
            size_hint_y: None
            height: dp(64)
            spacing: dp(12)
            padding: dp(12)

            MDRaisedButton:
                text: "‚¨ÖÔ∏è Quay l·∫°i danh s√°ch"
                on_release: app.go_back("scenario_list")

            MDRaisedButton:
                text: "‚û°Ô∏è Next"
                on_release: root.go_next()

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<KnowledgeScreen>:
    name: "knowledge"
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "üìñ Kho m·∫πo an to√†n"
            left_action_items: [["arrow-left", lambda x: app.go_back("menu")]]
            elevation: 6

        ScrollView:
            MDList:
                id: tips_box
                padding: dp(8)

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<HistoryScreen>:
    name: "history"
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "üìä L·ªãch s·ª≠"
            left_action_items: [["arrow-left", lambda x: app.go_back("menu")]]
            elevation: 6

        ScrollView:
            MDList:
                id: history_box
                padding: dp(8)

        MDBoxLayout:
            size_hint_y: None
            height: dp(72)
            spacing: dp(12)
            padding: dp(12)
            MDRaisedButton:
                text: "üóëÔ∏è Xo√° l·ªãch s·ª≠"
                on_release: root.clear_history()
            MDRaisedButton:
                text: "üì§ G·ª≠i b√°o c√°o m·∫´u"
                on_release: root.send_sample_report()

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)


<ProfileScreen>:
    name: "profile"
    MDBoxLayout:
        orientation: "vertical"

        MDTopAppBar:
            title: "üë§ H·ªì s∆°"
            left_action_items: [["arrow-left", lambda x: app.go_back("menu")]]
            elevation: 6

        MDBoxLayout:
            orientation: "vertical"
            padding: dp(20)
            spacing: dp(12)

            MDLabel:
                text: "Xin ch√†o, H·ªçc vi√™n!"
                font_style: "H6"
                halign: "center"

            MDProgressBar:
                id: profile_progress
                value: 0
                size_hint_y: None
                height: dp(8)

            MDLabel:
                id: profile_stat
                text: "ƒê√£ l√†m: 0  ‚Ä¢  ƒê√∫ng: 0  ‚Ä¢  T·ªâ l·ªá: 0%"
                halign: "center"
                font_style: "Caption"

        MDLabel:
            text: "¬© 2025 - Nh√≥m h·ªçc sinh THCS L√Ω T·ª± Tr·ªçng | Fanpage: L√Ω T·ª± Tr·ªçng G√≤ V·∫•p"
            halign: "center"
            font_style: "Caption"
            size_hint_y: None
            height: dp(28)
'''

# ---------------- Data files & defaults ----------------
DATA_DIR = os.path.join(os.path.dirname(__file__), "data_files")
os.makedirs(DATA_DIR, exist_ok=True)

SCENARIO_FILE = os.path.join(DATA_DIR, "scenarios.json")
USER_DATA_FILE = os.path.join(DATA_DIR, "user_data.json")
REPORTS_FILE = os.path.join(DATA_DIR, "reports.json")

DEFAULT_SCENARIOS = [
    {
        "id": "s1",
        "title": "Tin nh·∫Øn l·∫°",
        "description": "B·∫°n nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn y√™u c·∫ßu g·ª≠i m√£ OTP ƒë·ªÉ nh·∫≠n qu√†.",
        "choices": ["G·ª≠i m√£ OTP", "B√°o cho ng∆∞·ªùi l·ªõn", "G·ªçi l·∫°i s·ªë l·∫°", "Xo√° tin nh·∫Øn"],
        "correct_index": 1,
        "explanation": "Kh√¥ng bao gi·ªù chia s·∫ª m√£ OTP. B√°o cho ng∆∞·ªùi l·ªõn ho·∫∑c qu·∫£n tr·ªã."
    },
    {
        "id": "s2",
        "title": "L·ªùi m·ªùi g·∫∑p m·∫∑t t·ª´ ng∆∞·ªùi l·∫°",
        "description": "M·ªôt ng∆∞·ªùi quen tr√™n m·∫°ng m·ªùi b·∫°n g·∫∑p ·ªü qu√°n c√† ph√™ m·ªôt m√¨nh.",
        "choices": ["ƒê·ªìng √Ω g·∫∑p 1-1", "B√°o cho ph·ª• huynh v√† ch·ªçn n∆°i c√¥ng c·ªông", "G·ª≠i ƒë·ªãa ch·ªâ nh√†", "G·ª≠i ·∫£nh gi·∫•y t·ªù"],
        "correct_index": 1,
        "explanation": "Kh√¥ng n√™n g·∫∑p ng∆∞·ªùi l·∫° m·ªôt m√¨nh; h√£y th√¥ng b√°o ng∆∞·ªùi l·ªõn v√† ch·ªçn n∆°i c√¥ng c·ªông."
    },
    {
        "id": "s3",
        "title": "Tin nh·∫Øn y√™u c·∫ßu chuy·ªÉn ti·ªÅn",
        "description": "Tin nh·∫Øn b√°o t√†i kho·∫£n b·ªã kho√°, y√™u c·∫ßu chuy·ªÉn ti·ªÅn ƒë·ªÉ m·ªü.",
        "choices": ["Chuy·ªÉn ti·ªÅn ngay", "Ki·ªÉm tra k√™nh ch√≠nh th·ª©c v√† h·ªèi ng∆∞·ªùi l·ªõn", "G·ª≠i OTP ƒë·ªÉ x√°c minh", "G·ªçi l·∫°i s·ªë l·∫°"],
        "correct_index": 1,
        "explanation": "ƒê√¢y c√≥ th·ªÉ l√† l·ª´a ƒë·∫£o. Ki·ªÉm tra k√™nh ch√≠nh th·ª©c, kh√¥ng g·ª≠i OTP hay chuy·ªÉn ti·ªÅn."
    },
    {
        "id": "s4",
        "title": "Link l·∫° trong chat",
        "description": "B·∫°n ƒë∆∞·ª£c g·ª≠i link b·∫£o 'nh·∫≠n qu√† mi·ªÖn ph√≠' t·ª´ ng∆∞·ªùi l·∫°.",
        "choices": ["Click ngay", "H·ªèi ng∆∞·ªùi g·ª≠i", "Kh√¥ng click v√† b√°o ng∆∞·ªùi l·ªõn", "Chia s·∫ª link cho b·∫°n b√®"],
        "correct_index": 1,
        "explanation": "Kh√¥ng click link l·∫°, c√≥ th·ªÉ ch·ª©a m√£ ƒë·ªôc."
    },
    {
        "id": "s5",
        "title": "Y√™u c·∫ßu ƒë·ªãa ch·ªâ nh√†",
        "description": "Ng∆∞·ªùi l·∫° tr√™n m·∫°ng y√™u c·∫ßu ƒë·ªãa ch·ªâ ƒë·ªÉ g·ª≠i qu√†.",
        "choices": ["G·ª≠i ƒë·ªãa ch·ªâ th·∫≠t", "Kh√¥ng g·ª≠i, b√°o cho ng∆∞·ªùi l·ªõn", "G·ª≠i ƒë·ªãa ch·ªâ gi·∫£", "H·∫πn giao trong game"],
        "correct_index": 1,
        "explanation": "Kh√¥ng cung c·∫•p th√¥ng tin c√° nh√¢n v·ªõi ng∆∞·ªùi l·∫°."
    }
]
TIPS = [
    "Kh√¥ng chia s·∫ª ƒë·ªãa ch·ªâ, s·ªë ƒëi·ªán tho·∫°i, m√£ OTP cho ng∆∞·ªùi l·∫°.",
    "Kh√¥ng nh·∫•p v√†o link l·∫°, kh√¥ng t·∫£i file t·ª´ ngu·ªìn kh√¥ng r√µ.",
    "N·∫øu c√≥ l·ªùi m·ªùi g·∫∑p m·∫∑t, h√£y b√°o cho ng∆∞·ªùi l·ªõn.",
    "S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh, b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë.",
    "N·∫øu b·ªã qu·∫•y r·ªëi, ch·∫∑n v√† b√°o c√°o cho qu·∫£n tr·ªã ho·∫∑c ng∆∞·ªùi l·ªõn."
]

# ---------------- Helpers ----------------
def load_json_default(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return default
    return default


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def ensure_default_files():
    if not os.path.exists(SCENARIO_FILE):
        save_json(SCENARIO_FILE, DEFAULT_SCENARIOS)
    if not os.path.exists(USER_DATA_FILE):
        save_json(USER_DATA_FILE, [])
    if not os.path.exists(REPORTS_FILE):
        save_json(REPORTS_FILE, [])


# ---------------- Screens logic ----------------
class MainMenuScreen(Screen):
    pass


class ScenarioListScreen(Screen):
    def on_pre_enter(self, *args):
        self.populate_list()

    def populate_list(self):
        self.ids.list_container.clear_widgets()
        scenarios = load_json_default(SCENARIO_FILE, [])
        from kivymd.uix.list import OneLineAvatarIconListItem, IconLeftWidget
        for idx, s in enumerate(scenarios):
            item = OneLineAvatarIconListItem(text=f"{s.get('title')}",
                                            on_release=lambda inst, i=idx: self.open_index(i))
            item.add_widget(IconLeftWidget(icon="alert-circle"))
            self.ids.list_container.add_widget(item)

    def open_index(self, idx):
        scenarios = load_json_default(SCENARIO_FILE, [])
        if 0 <= idx < len(scenarios):
            sc = self.manager.get_screen("scenario")
            sc.set_scenario(scenarios[idx], idx)
            self.manager.current = "scenario"

    def open_random(self):
        scenarios = load_json_default(SCENARIO_FILE, [])
        if scenarios:
            idx = random.randrange(len(scenarios))
            self.open_index(idx)


class ScenarioScreen(Screen):
    scenario = DictProperty({})
    current_index = NumericProperty(-1)
    answered = BooleanProperty(False)

    def set_scenario(self, scenario, index):
        self.scenario = scenario
        self.current_index = index
        self.answered = False
        self.ids.choice_box.clear_widgets()
        from kivymd.uix.button import MDRaisedButton
        from kivymd.app import MDApp as _MDApp
        theme = _MDApp.get_running_app().theme_cls
        for i, choice in enumerate(scenario.get("choices", [])):
            btn = MDRaisedButton(
                text=f"{i+1}. {choice}",
                size_hint_y=None,
                height=dp(48),
                md_bg_color=theme.primary_light,
                on_release=lambda inst, idx=i: self.on_choose(idx)
            )
            self.ids.choice_box.add_widget(btn)
        self.ids.desc_label.text = scenario.get("description", "")
        self.ids.feedback.text = ""

    def on_choose(self, idx):
        if self.answered:
            return
        self.answered = True
        correct = self.scenario.get("correct_index", 0)
        is_correct = (idx == correct)
        # save answer
        data = load_json_default(USER_DATA_FILE, [])
        data.append({
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "scenario_id": self.scenario.get("id"),
            "scenario_title": self.scenario.get("title"),
            "choice_index": idx,
            "choice_text": self.scenario.get("choices", [])[idx] if idx < len(self.scenario.get("choices", [])) else "",
            "correct_index": correct,
            "is_correct": is_correct
        })
        save_json(USER_DATA_FILE, data)

        # populate result screen
        res = self.manager.get_screen("result")
        res.title = self.scenario.get("title", "K·∫øt qu·∫£")
        res.current_index = self.current_index
        if is_correct:
            res.verdict_text = "‚úÖ AN TO√ÄN ‚Äî L·ª±a ch·ªçn ƒë√∫ng"
        else:
            res.verdict_text = "‚ö†Ô∏è NGUY HI·ªÇM ‚Äî L·ª±a ch·ªçn sai"
        res.explanation = f"{self.scenario.get('explanation','')}\n\nPh∆∞∆°ng √°n ƒë√∫ng: {self.scenario.get('choices',[])[correct]}"
        self.manager.current = "result"

    def show_explanation(self):
        self.ids.feedback.text = self.scenario.get("explanation", "")

    def send_report(self):
        reports = load_json_default(REPORTS_FILE, [])
        reports.append({
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "scenario_id": self.scenario.get("id"),
            "note": f"Ng∆∞·ªùi d√πng g·ª≠i b√°o c√°o cho '{self.scenario.get('title')}'."
        })
        save_json(REPORTS_FILE, reports)
        self.ids.feedback.text = "üì§ ƒê√£ g·ª≠i b√°o c√°o (m√¥ ph·ªèng)"


class ResultScreen(Screen):
    title = StringProperty("K·∫øt qu·∫£")
    verdict_text = StringProperty("")
    explanation = StringProperty("")
    current_index = NumericProperty(-1)

    def go_next(self):
        scenarios = load_json_default(SCENARIO_FILE, [])
        next_idx = self.current_index + 1
        if next_idx < len(scenarios):
            sc = self.manager.get_screen("scenario")
            sc.set_scenario(scenarios[next_idx], next_idx)
            self.manager.current = "scenario"
        else:
            # n·∫øu h·∫øt c√¢u -> quay v·ªÅ danh s√°ch
            self.manager.current = "scenario_list"


class KnowledgeScreen(Screen):
    def on_pre_enter(self, *args):
        self.ids.tips_box.clear_widgets()
        from kivymd.uix.list import OneLineListItem
        for t in TIPS:
            self.ids.tips_box.add_widget(OneLineListItem(text=t))


class HistoryScreen(Screen):
    def on_pre_enter(self, *args):
        Clock.schedule_once(lambda dt: self.populate(), 0.02)

    def populate(self):
        self.ids.history_box.clear_widgets()
        data = load_json_default(USER_DATA_FILE, [])
        reports = load_json_default(REPORTS_FILE, [])
        from kivymd.uix.list import OneLineListItem
        if not data and not reports:
            self.ids.history_box.add_widget(OneLineListItem(text="Ch∆∞a c√≥ l·ªãch s·ª≠."))
            return
        for e in reversed(data):
            ok = "ƒê√∫ng" if e.get("is_correct") else "Sai"
            self.ids.history_box.add_widget(OneLineListItem(text=f"[{e.get('timestamp')}] {e.get('scenario_title')} ‚Äî {ok}"))
        if reports:
            self.ids.history_box.add_widget(OneLineListItem(text="--- B√°o c√°o ---"))
            for r in reversed(reports):
                self.ids.history_box.add_widget(OneLineListItem(text=f"[{r.get('timestamp')}] {r.get('note')}"))

    def clear_history(self):
        save_json(USER_DATA_FILE, [])
        save_json(REPORTS_FILE, [])
        self.populate()

    def send_sample_report(self):
        reports = load_json_default(REPORTS_FILE, [])
        reports.append({
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "scenario_id": "sample",
            "note": "üì¢ B√°o c√°o m·∫´u"
        })
        save_json(REPORTS_FILE, reports)
        self.populate()


class ProfileScreen(Screen):
    def on_pre_enter(self, *args):
        data = load_json_default(USER_DATA_FILE, [])
        scenarios = load_json_default(SCENARIO_FILE, [])
        total_done = len(data)
        total_q = len(scenarios)
        done_pct = int(total_done / total_q * 100) if total_q else 0
        correct_count = sum(1 for d in data if d.get("is_correct"))
        correct_pct = int(correct_count / total_done * 100) if total_done else 0
        # set UI
        self.ids.profile_progress.value = done_pct
        self.ids.profile_stat.text = f"ƒê√£ l√†m: {total_done}  ‚Ä¢  ƒê√∫ng: {correct_count}  ‚Ä¢  T·ªâ l·ªá: {correct_pct}%"


# ---------------- App ----------------
class Canh_Giac_Online(MDApp):
    def build(self):
        ensure_default_files()
        # Material 3
        try:
            self.theme_cls.material_style = "M3"
        except Exception:
            pass
        self.theme_cls.primary_palette = "Blue"
        self.theme_cls.theme_style = "Light"
        return Builder.load_string(KV)

    def go_back(self, screen_name):
        self.root.current = screen_name


if __name__ == "__main__":
    Canh_Giac_Online().run()
